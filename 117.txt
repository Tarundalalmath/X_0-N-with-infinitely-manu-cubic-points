M := ModularForms(117,2);
S := CuspidalSubspace(M);
Dimension(S);
W := AtkinLehnerOperator(S, 117);
Eigenvalues(W);
Eigenspace(W, 1);
f1:=(S.1 - 3*S.4 - 6*S.6 - 14*S.7 + 8*S.8 + 8*S.9 + 10*S.10 - 6*S.11);
f2:=(S.2 - 2*S.4 - 4*S.6 - 4*S.7 + 3*S.8 + 4*S.9 + 4*S.10 - 2*S.11);
f3:=(S.3 - S.4 - 2*S.6 - 5*S.7 + 4*S.8 + 3*S.9 + 4*S.10 - 3*S.11);
f4:=(S.5 - S.6 - 3*S.7 + S.8 + 2*S.9 + 2*S.10 - S.11);
prec:=100;
L<q> := LaurentSeriesRing(Rationals(),prec);
R<x,y,z,w>:=PolynomialRing(Rationals(),4);
Bexp:=[L!qExpansion(f1,prec), L!qExpansion(f2,prec), L!qExpansion(f3,prec), L!qExpansion(f4,prec)];
	eqns:=[R | ];
	d:=1;
tf:=false;
	while tf eq false do
		d:=d+1;
		mons:=MonomialsOfDegree(R,d);
		monsq:=[Evaluate(mon,Bexp) : mon in mons];
		V:=VectorSpace(Rationals(),#mons);
		W:=VectorSpace(Rationals(),prec-10);
		h:=hom<V->W | [W![Coefficient(monsq[i],j) : j in [1..(prec-10)]] : i in [1..#mons]]>;
		K:=Kernel(h);
		eqns:=eqns cat [ &+[Eltseq(V!k)[j]*mons[j] : j in [1..#mons] ] : k in Basis(K)  ];
		X:=Scheme(ProjectiveSpace(R),eqns);
		if Dimension(X) eq 1 then
			if IsSingular(X) eq false then
				X:=Curve(ProjectiveSpace(R),eqns);
				if Genus(X) eq 4 then
					tf:=true;
				end if;
			end if;
		end if;
	end while;
eqns:=GroebnerBasis(ideal<R | eqns>); // Simplifying the equations.
	tf:=true;
	repeat
		t:=#eqns;
		tf:=(eqns[t] in ideal<R | eqns[1..(t-1)]>);
		if tf then 
			Exclude(~eqns,eqns[t]);
		end if;
	until tf eq false;
	t:=0;
	repeat
		t:=t+1;
		tf:=(eqns[t] in ideal<R | Exclude(eqns,eqns[t])>);	
		if tf then
			Exclude(~eqns,eqns[t]);
			t:=0;
		end if;
        until tf eq false;
t:=0;
	repeat
		t:=t+1;
		tf:=(eqns[t] in ideal<R | Exclude(eqns,eqns[t])>);	
		if tf then
			Exclude(~eqns,eqns[t]);
			t:=0;
		end if;
	until tf eq false and t eq #eqns;
X:=Curve(ProjectiveSpace(R),eqns);
X;
